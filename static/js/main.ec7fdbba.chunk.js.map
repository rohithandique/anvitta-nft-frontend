{"version":3,"sources":["components/Upload.js","App.js","index.js"],"names":["Upload","console","log","process","REACT_APP_API_KEY","fileInputRef","useRef","nameRef","descriptionRef","mintNft","_name","_description","_url","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","mintNFT","nftTxn","hash","mt","onSubmit","e","preventDefault","current","files","formData","FormData","append","fetch","method","body","headers","then","response","json","NFTname","value","NFTdescription","NFTurl","cid","name","type","ref","id","App","useState","currentAccount","setCurrentAccount","useEffect","checkIfWalletIsConnected","request","accounts","length","account","connectWallet","alert","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RA8FeA,MAvFf,WAEIC,QAAQC,IAAIC,mIAAYC,mBAExB,IACMC,EAAeC,mBACfC,EAAUD,mBACVE,EAAiBF,mBAEjBG,EAAO,uCAAG,WAAOC,EAAOC,EAAcC,GAA5B,yBAAAC,EAAA,oEAEWC,SAAbC,EAFE,EAEFA,UAFE,wBAOFC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAE7CK,EAASJ,EAASK,YAElBC,EAAoB,IAAIL,IAAOM,SAhBpB,6CAgB+CC,EAAIA,IAAKJ,GAEzEnB,QAAQC,IAAI,yCAbJ,SAeWoB,EAAkBG,QAAQf,EAAOC,EAAcC,GAf1D,OAeJc,EAfI,OAiBRzB,QAAQC,IAAI,yBACZD,QAAQC,IAAIwB,GACZzB,QAAQC,IAAR,kEAAuEwB,EAAOC,OAnBtE,wBAsBR1B,QAAQC,IAAI,kCAtBJ,0DAyBVD,QAAQC,IAAR,MAzBU,0DAAH,0DAyDb,OACI,cAAC,IAAD,CAAW0B,GAAI,GAAf,SACA,uBAAMC,SA9BO,SAACC,GACdA,EAAEC,iBACF9B,QAAQC,IAAIG,EAAa2B,QAAQC,MAAM,IACvC,IAAMC,EAAW,IAAIC,SACrBD,EAASE,OACT,OACA/B,EAAa2B,QAAQC,MAAM,IAG3BI,MAAM,iCAAkC,CACxCC,OAAQ,OACRC,KAAML,EACNM,QAAS,CACL,cAAiB,UAAUrC,mIAAYC,qBAG1CqC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACF1C,QAAQC,IAAIyC,GACZ,IAAMC,EAAUrC,EAAQyB,QAAQa,MAC1BC,EAAiBtC,EAAewB,QAAQa,MACxCE,EAASJ,EAAKE,MAAMG,IAAM,IAAM3C,EAAa2B,QAAQC,MAAM,GAAGgB,KACpEhD,QAAQC,IAAI0C,GACZ3C,QAAQC,IAAI4C,GACZrC,EAAQmC,EAASE,EAAgBC,OAMrC,UACA,eAAC,IAAD,WACI,cAAC,IAAD,0BACA,cAAC,IAAD,CAAOG,KAAK,OAAOC,IAAK9C,OAE5B,eAAC,IAAD,CAAa+C,GAAG,OAAhB,UACI,cAAC,IAAD,uBACA,cAAC,IAAD,CAAOF,KAAK,OAAOC,IAAK5C,OAE5B,eAAC,IAAD,CAAa6C,GAAG,cAAhB,UACI,cAAC,IAAD,0BACA,cAAC,IAAD,CAAOF,KAAK,OAAOC,IAAK3C,OAE5B,cAAC,IAAD,CAAQ0C,KAAK,SAAb,4BChBOG,MAlEf,WAEE,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAwB,uCAAG,kCAAA7C,EAAA,2DACVC,OAAbC,EADuB,EACvBA,SADuB,uBAI3Bd,QAAQC,IAAI,gCAJe,0BAO3BD,QAAQC,IAAI,8BAA+Ba,GAPhB,uBAURA,EAAS4C,QAAQ,CAAErB,OAAQ,iBAVnB,OAYP,KAFlBsB,EAVyB,QAYlBC,QACHC,EAAUF,EAAS,GACzB3D,QAAQC,IAAI,+BAAgC4D,GAC5CN,EAAkBM,IAGlB7D,QAAQC,IAAI,+BAlBe,4CAAH,qDAsBxB6D,EAAa,uCAAG,gCAAAlD,EAAA,oEAEGC,OAAbC,EAFU,EAEVA,SAFU,uBAKhBiD,MAAM,iBALU,0CASKjD,EAAS4C,QAAQ,CAAErB,OAAQ,wBAThC,OASZsB,EATY,OAWlB3D,QAAQC,IAAI,YAAa0D,EAAS,IAClCJ,EAAkBI,EAAS,IAZT,kDAelB3D,QAAQC,IAAR,MAfkB,0DAAH,qDA6BnB,OACE,cAAC,IAAD,CAAW0B,GAAI,GAAf,SACI2B,EALJ,cAAC,EAAD,IANA,cAAC,IAAD,CAAQU,QAAS,WAAKF,KAAtB,kC,QCnDJG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,U","file":"static/js/main.ec7fdbba.chunk.js","sourcesContent":["import React, { useRef } from \"react\"\nimport { ethers } from \"ethers\";\nimport abi from \"../utils/abi.json\";\nimport {\n  FormControl, FormLabel, Input, Button, Container\n} from \"@chakra-ui/react\"\n\nfunction Upload() {\n\n    console.log(process.env.REACT_APP_API_KEY)\n\n    const contract_address = \"0x4306dce14cEd3B5Aac553C29Fa465322342707A4\";\n    const fileInputRef = useRef();\n    const nameRef = useRef();\n    const descriptionRef = useRef();\n\n    const mintNft = async (_name, _description, _url) => {\n        try {\n          const { ethereum } = window; //injected by metamask\n    \n          if (ethereum) {\n    \n            //connect to an ethereum node\n            const provider = new ethers.providers.Web3Provider(ethereum); \n            //gets the account\n            const signer = provider.getSigner(); \n            //connects with the contract\n            const connectedContract = new ethers.Contract(contract_address, abi.abi, signer);\n    \n            console.log(\"Going to pop wallet now to pay gas...\")\n            //call the mintNFT function of the contract\n            let nftTxn = await connectedContract.mintNFT(_name, _description, _url);\n    \n            console.log(\"Mining...please wait.\")\n            console.log(nftTxn);\n            console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n    \n          } else {\n            console.log(\"Ethereum object doesn't exist!\");\n          }\n        } catch (error) {\n          console.log(error)\n        }\n    }  \n\n    const onUpload = (e) => {\n        e.preventDefault();\n        console.log(fileInputRef.current.files[0])\n        const formData = new FormData();\n        formData.append(  \n        \"file\",\n        fileInputRef.current.files[0],\n        );\n\n        fetch(\"https://api.nft.storage/upload\", {\n        method: \"POST\",\n        body: formData,\n        headers: {\n            'Authorization': 'Bearer '+process.env.REACT_APP_API_KEY\n        }\n        })\n        .then(response => response.json())\n        .then(json => {\n            console.log(json)\n            const NFTname = nameRef.current.value;\n            const NFTdescription = descriptionRef.current.value;\n            const NFTurl = json.value.cid + \"/\" + fileInputRef.current.files[0].name;\n            console.log(NFTname)\n            console.log(NFTdescription)\n            mintNft(NFTname, NFTdescription, NFTurl);\n        });\n    }\n\n    return (\n        <Container mt={40}>\n        <form onSubmit={onUpload}>\n        <FormControl>\n            <FormLabel>Upload File</FormLabel>\n            <Input type=\"file\" ref={fileInputRef}/>\n        </FormControl>\n        <FormControl id=\"name\">\n            <FormLabel>NFT name</FormLabel>\n            <Input type=\"name\" ref={nameRef}/>\n        </FormControl>\n        <FormControl id=\"description\">\n            <FormLabel>Description</FormLabel>\n            <Input type=\"text\" ref={descriptionRef}/>\n        </FormControl>\n        <Button type=\"submit\" > Submit </Button>\n        </form>\n        </Container>\n    );\n}\n\nexport default Upload;\n","import React, { useState, useEffect } from \"react\";\nimport Upload from \"./components/Upload\";\nimport {\n   Button, Container\n} from \"@chakra-ui/react\"\n\nfunction App() {\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n    } else {\n        console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account)\n\n    } else {\n        console.log(\"No authorized account found\")\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const renderConnectedUI = () => (\n    <Button onClick={()=>{connectWallet()}}>\n      Connect to Wallet\n    </Button>\n  );\n\n  const renderMintUI = () => (\n    <Upload />\n  )\n\n  return (\n    <Container mt={40}>\n      {(currentAccount) ? renderMintUI() : renderConnectedUI()}\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}